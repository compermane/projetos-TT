    1: def test_demean():

           """Runs the high-dimensional case.

           """

    1:     p = 2

    1:     n = 13

    1:     sigma = np.eye(p, p)

    1:     data = np.random.multivariate_normal(np.zeros(p), sigma, n)

       

    1:     sigma_tilde = nls.shrink_cov(data)

    1:     S = np.sum(sigma_tilde[np.eye(p) == 0]) / n_choose_k(p, 2) / np.sum(np.diag(sigma_tilde)) * p

    1:     assert S < 1  # assert that the diagonal is the major contributor

       

       

